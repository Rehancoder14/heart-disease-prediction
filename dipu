from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,shuffle=True,random_state=42)
print("x_train shape",x_train.shape)
print("x_test shape",x_test.shape)
print("y_train shape",y_train.shape)
print("y_test shape",y_test.shape)
from sklearn.ensemble import RandomForestClassifier
clf1=RandomForestClassifier(n_estimators=3,random_state=0,max_depth=6,max_features=4)
clf1.fit(x_train,y_train)
clf1.score(x_train,y_train)
y_pred1=clf1.predict(x_test)
y_pred1
from sklearn.metrics import accuracy_score,confusion_matrix
a=accuracy_score(y_test,y_pred1)
cm1=confusion_matrix(y_test,y_pred1)
a
cm1
sns.heatmap(cm1,annot=True,cmap="Reds")
from sklearn.svm import SVC
clf2=SVC(kernel="linear",random_state=0)
clf2.fit(x_train,y_train)
clf2.score(x_train,y_train)
y_pred2=clf2.predict(x_test)
y_pred2
from sklearn.metrics import accuracy_score,confusion_matrix
b=accuracy_score(y_test,y_pred2)
cm2=confusion_matrix(y_test,y_pred2)
b
cm2
sns.heatmap(cm2,annot=True)
from sklearn.linear_model import LogisticRegression
clf3=LogisticRegression()
clf3.fit(x_train,y_train)
clf3.score(x_train,y_train)
y_pred3=clf3.predict(x_test)
y_pred3
from sklearn.metrics import accuracy_score,confusion_matrix
c=accuracy_score(y_test,y_pred3)
cm3=confusion_matrix(y_test,y_pred3)
c
cm3
sns.heatmap(cm3,annot=True)
from sklearn.ensemble import GradientBoostingClassifier
clf4=GradientBoostingClassifier()
clf4.fit(x_train,y_train)
clf4.score(x_train,y_train)
y_pred4=clf4.predict(x_test)
y_pred4
from sklearn.metrics import accuracy_score,confusion_matrix
d=accuracy_score(y_test,y_pred4)
cm4=confusion_matrix(y_test,y_pred4)
d
cm4
sns.heatmap(cm4,annot=True)
